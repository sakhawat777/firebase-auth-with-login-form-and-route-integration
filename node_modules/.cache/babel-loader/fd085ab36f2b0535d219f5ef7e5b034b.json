{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\Web Development\\\\React-Projects\\\\firebase-auth\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport FirebaseApp from './Firebase/firebase.config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nFirebaseApp();\n\nfunction App() {\n  _s();\n\n  const [user, setUser] = useState({\n    isSignIn: false,\n    name: '',\n    email: '',\n    photo: ''\n  });\n  const auth = getAuth();\n  const provider = new GoogleAuthProvider();\n\n  const handleSignIn = () => {\n    signInWithPopup(auth, provider).then(result => {\n      const {\n        displayName,\n        photoURL,\n        email\n      } = result.user;\n      console.log(displayName, photoURL, email);\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message; // The email of the user's account used.\n\n      const email = error.email; // The AuthCredential type that was used.\n\n      const credential = GoogleAuthProvider.credentialFromError(error); // ...\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSignIn,\n      children: \"Sign In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"C6UxjXRSa5gtg4O2DsXp6F0ivWE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/xampp/htdocs/Web Development/React-Projects/firebase-auth/src/App.js"],"names":["React","useState","getAuth","signInWithPopup","GoogleAuthProvider","FirebaseApp","App","user","setUser","isSignIn","name","email","photo","auth","provider","handleSignIn","then","result","displayName","photoURL","console","log","catch","error","errorCode","code","errorMessage","message","credential","credentialFromError"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,kBAAnC,QAA6D,eAA7D;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;AACAA,WAAW;;AACX,SAASC,GAAT,GAAe;AAAA;;AACb,QAAO,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC;AAChCQ,IAAAA,QAAQ,EAAE,KADsB;AAEhCC,IAAAA,IAAI,EAAE,EAF0B;AAGhCC,IAAAA,KAAK,EAAE,EAHyB;AAIhCC,IAAAA,KAAK,EAAE;AAJyB,GAAD,CAAjC;AAMA,QAAMC,IAAI,GAAGX,OAAO,EAApB;AACA,QAAMY,QAAQ,GAAG,IAAIV,kBAAJ,EAAjB;;AACA,QAAMW,YAAY,GAAG,MAAM;AACzBZ,IAAAA,eAAe,CAACU,IAAD,EAAOC,QAAP,CAAf,CACCE,IADD,CACOC,MAAD,IAAY;AAChB,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBR,QAAAA;AAAzB,UAAkCM,MAAM,CAACV,IAA/C;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ,EAAyBC,QAAzB,EAAmCR,KAAnC;AACD,KAJD,EAKCW,KALD,CAKQC,KAAD,IAAW;AAChB;AACA,YAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;AACA,YAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B,CAHgB,CAIhB;;AACA,YAAMhB,KAAK,GAAGY,KAAK,CAACZ,KAApB,CALgB,CAMhB;;AACA,YAAMiB,UAAU,GAAGxB,kBAAkB,CAACyB,mBAAnB,CAAuCN,KAAvC,CAAnB,CAPgB,CAQhB;AACD,KAdD;AAgBD,GAjBD;;AAmBD,sBAAO;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACJ;AAAQ,MAAA,OAAO,EAAER,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADI;AAAA;AAAA;AAAA;AAAA,UAAP;AAGA;;GA/BQT,G;;KAAAA,G;AAiCT,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react'\nimport './App.css';\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport FirebaseApp from './Firebase/firebase.config';\nFirebaseApp();\nfunction App() {\n  const  [user, setUser] = useState({\n    isSignIn: false,\n    name: '',\n    email: '',\n    photo: ''\n  });\n  const auth = getAuth();\n  const provider = new GoogleAuthProvider();\n  const handleSignIn = () => {\n    signInWithPopup(auth, provider)\n    .then((result) => {\n      const { displayName, photoURL, email} = result.user;\n      console.log(displayName, photoURL, email)\n    })\n    .catch((error) => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      // ...\n    });\n\n  }\n\n\treturn <div className=\"App\">\n    <button onClick={handleSignIn}>Sign In</button>\n  </div>;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}